//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ServiceChat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChat.IServiceChat", CallbackContract=typeof(ChatClient.ServiceChat.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        int Connect(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Connect", ReplyAction="http://tempuri.org/IServiceChat/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        void SendMsg(string text, int idSender, int idReceiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsg")]
        System.Threading.Tasks.Task SendMsgAsync(string text, int idSender, int idReceiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsgChat")]
        void SendMsgChat(string text, int idReceiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMsgChat")]
        System.Threading.Tasks.Task SendMsgChatAsync(string text, int idReceiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendFile")]
        void SendFile(string name, byte[] fileData, int idSender, int idReceiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendFile")]
        System.Threading.Tasks.Task SendFileAsync(string name, byte[] fileData, int idSender, int idReceiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/UpdateUsers")]
        void UpdateUsers();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/UpdateUsers")]
        System.Threading.Tasks.Task UpdateUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserIdByName", ReplyAction="http://tempuri.org/IServiceChat/GetUserIdByNameResponse")]
        int GetUserIdByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserIdByName", ReplyAction="http://tempuri.org/IServiceChat/GetUserIdByNameResponse")]
        System.Threading.Tasks.Task<int> GetUserIdByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserNameById", ReplyAction="http://tempuri.org/IServiceChat/GetUserNameByIdResponse")]
        string GetUserNameById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/GetUserNameById", ReplyAction="http://tempuri.org/IServiceChat/GetUserNameByIdResponse")]
        System.Threading.Tasks.Task<string> GetUserNameByIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MsgCallback")]
        void MsgCallback(string time, string author, string text, int idSender, int idReceiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MsgChatCallback")]
        void MsgChatCallback(string time, string author, string text);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/UsersCallback")]
        void UsersCallback(int[] userIds, string[] userNames);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/FileCallback")]
        void FileCallback(string time, string author, string name, byte[] fileData, int idSender, int idReceiver);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : ChatClient.ServiceChat.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<ChatClient.ServiceChat.IServiceChat>, ChatClient.ServiceChat.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect(string name) {
            return base.Channel.Connect(name);
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync(string name) {
            return base.Channel.ConnectAsync(name);
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public void SendMsg(string text, int idSender, int idReceiver) {
            base.Channel.SendMsg(text, idSender, idReceiver);
        }
        
        public System.Threading.Tasks.Task SendMsgAsync(string text, int idSender, int idReceiver) {
            return base.Channel.SendMsgAsync(text, idSender, idReceiver);
        }
        
        public void SendMsgChat(string text, int idReceiver) {
            base.Channel.SendMsgChat(text, idReceiver);
        }
        
        public System.Threading.Tasks.Task SendMsgChatAsync(string text, int idReceiver) {
            return base.Channel.SendMsgChatAsync(text, idReceiver);
        }
        
        public void SendFile(string name, byte[] fileData, int idSender, int idReceiver) {
            base.Channel.SendFile(name, fileData, idSender, idReceiver);
        }
        
        public System.Threading.Tasks.Task SendFileAsync(string name, byte[] fileData, int idSender, int idReceiver) {
            return base.Channel.SendFileAsync(name, fileData, idSender, idReceiver);
        }
        
        public void UpdateUsers() {
            base.Channel.UpdateUsers();
        }
        
        public System.Threading.Tasks.Task UpdateUsersAsync() {
            return base.Channel.UpdateUsersAsync();
        }
        
        public int GetUserIdByName(string name) {
            return base.Channel.GetUserIdByName(name);
        }
        
        public System.Threading.Tasks.Task<int> GetUserIdByNameAsync(string name) {
            return base.Channel.GetUserIdByNameAsync(name);
        }
        
        public string GetUserNameById(int id) {
            return base.Channel.GetUserNameById(id);
        }
        
        public System.Threading.Tasks.Task<string> GetUserNameByIdAsync(int id) {
            return base.Channel.GetUserNameByIdAsync(id);
        }
    }
}
